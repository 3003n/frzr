#! /bin/bash

get_img_url() {
    CHANNEL=$1

    result=$(jq '[
          sort_by(.created_at) |
          reverse |
          .[] |
          { name: .name, prerelease: .prerelease, state: .assets[].state, url: .assets[].browser_download_url } |
          select(.url|test("img")) |
          select(.state=="uploaded")
        ]')

    if [ "$CHANNEL" == "testing" ]; then
        result=$(echo $result | jq '[ .[] | select(.name|test("UNSTABLE")|not) ]')
    elif [ "$CHANNEL" == "stable" ]; then
        result=$(echo $result | jq '[ .[] | select(.prerelease==false) ]')
    fi

    echo $result | jq 'first | .url' | sed 's/"//g'
}


if [ $EUID -ne 0 ]; then
	echo "$(basename $0) must be run as root"
	exit 1
fi

set -e
set -x

MOUNT_PATH=/frzr_root

UEFI="-d /sys/firmware/efi/efivars"

if ! mountpoint -q ${MOUNT_PATH}; then
	MOUNT_PATH=/tmp/frzr_root
fi

DEPLOY_PATH=${MOUNT_PATH}/deployments

if ! mountpoint -q ${MOUNT_PATH}; then
	mkdir -p ${MOUNT_PATH}
	mount -L frzr_root ${MOUNT_PATH}
	sleep 5
fi

if [ $UEFI ] && ! mountpoint -q ${MOUNT_PATH}/boot; then
	mkdir -p ${MOUNT_PATH}/boot
	mount -L frzr_efi ${MOUNT_PATH}/boot
	sleep 5
fi

mkdir -p ${DEPLOY_PATH}

# delete old deployments unless we are not currently running a frzr deployment (i.e. during install)
if frzr-release > /dev/null; then
	CURRENT=`frzr-release`
	TO_DELETE=`ls -1 ${DEPLOY_PATH} | grep -v ${CURRENT} | head -1`
	if [ ! -z ${TO_DELETE} ]; then
		echo "deleting ${TO_DELETE}..."
		btrfs subvolume delete ${DEPLOY_PATH}/${TO_DELETE} || true
	fi
fi

if [ ! -z $1 ]; then
	echo "$1" > "${MOUNT_PATH}/source"
fi

if [ -e "${MOUNT_PATH}/source" ]; then
	SOURCE=`cat "${MOUNT_PATH}/source" | head -1`
else
	echo "ERROR: no source specified"
	exit
fi

REPO=$(echo "${SOURCE}" | cut -f 1 -d ':')
CHANNEL=$(echo "${SOURCE}" | cut -f 2 -d ':')

RELEASES_URL="https://api.github.com/repos/${REPO}/releases"

IMG_URL=$(curl -L -s "${RELEASES_URL}" | get_img_url "${CHANNEL}")
FILE_NAME=$(basename ${IMG_URL})
NAME=$(echo "${FILE_NAME}" | cut -f 1 -d '.')
BASE_URL=$(dirname "${IMG_URL}")
CHECKSUM=$(curl -L -s "${BASE_URL}/sha256sum.txt" | cut -f -1 -d ' ')
SUBVOL="${DEPLOY_PATH}/${NAME}"
IMG_FILE="${MOUNT_PATH}/${FILE_NAME}"

if [ -e ${SUBVOL} ]; then
	echo "${NAME} already installed; aborting"
	exit
fi

echo "downloading ${NAME}..."

curl -L -o "${IMG_FILE}" -C - "${IMG_URL}"

CHECKSUM2=`sha256sum "${IMG_FILE}" | cut -d' ' -f 1`
if [ "$CHECKSUM" != "$CHECKSUM2" ]; then
	echo "checksum does not match; aborting"
	exit 1
fi

echo "installing ${NAME}..."

tar xfO ${IMG_FILE} | btrfs receive ${DEPLOY_PATH}
cp ${SUBVOL}/boot/vmlinuz-linux ${MOUNT_PATH}/boot/
cp ${SUBVOL}/boot/initramfs-linux.img ${MOUNT_PATH}/boot/

# check if this is a UEFI system
if [ $UEFI ]; then
echo "
default ${NAME}
label ${NAME}
kernel ../../vmlinuz-linux
append root=LABEL=frzr_root rw rootflags=subvol=deployments/${NAME} quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3
initrd ../../initramfs-linux.img
" > ${MOUNT_PATH}/boot/EFI/syslinux/syslinux.cfg
else
echo "
default ${NAME}
label ${NAME}
kernel ../vmlinuz-linux
append root=LABEL=frzr_root rw rootflags=subvol=deployments/${NAME} quiet splash loglevel=3 rd.systemd.show_status=auto rd.udev.log_priority=3
initrd ../initramfs-linux.img
" > ${MOUNT_PATH}/boot/syslinux/syslinux.cfg
fi

rm -f ${MOUNT_PATH}/*.img.*

umount -R ${MOUNT_PATH}

rm -rf /var/lib/pacman # undo frzr-unlock

echo "deployment complete; restart to boot into ${NAME}"

if command -v frzr-postupdate-script > /dev/null; then
	frzr-postupdate-script
fi
